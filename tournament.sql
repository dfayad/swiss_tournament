-- Table definitions for the tournament project.
--
-- Put your SQL 'create table' statements in this file; also 'create view'
-- statements if you choose to use it.
--
-- You can write comments in this file by starting them with two dashes, like
-- these lines here.

--check if database already exists
DROP DATABASE IF EXISTS tournament;

--create db
CREATE DATABASE tournament;

--connect to db tournament
\c tournament

-- A TABLE THAT HAS THE PLAYERS' INFORMATION
CREATE TABLE PLAYERS
(

PLAYER_ID SERIAL PRIMARY KEY, --unique player ID

NAME TEXT --name of players
);

-- A TABLE THAT HAS THE MATCHES' INFORMATION
CREATE TABLE MATCHES
(

MATCH_ID SERIAL PRIMARY KEY, --unique match ID

WINNER INT REFERENCES PLAYERS(PLAYER_ID), --player ID of winner of this match

LOSER INT REFERENCES PLAYERS(PLAYER_ID) ----player ID of loser of this match

);

--A VIEW THAT CONTAINS PLAYER INFORMATION AND NUMBER OF GAMES WON
CREATE VIEW PLAYER_WINS AS
SELECT PLAYERS.PLAYER_ID, PLAYERS.NAME, COUNT(MATCHES.WINNER) AS WINS
FROM PLAYERS LEFT JOIN MATCHES ON PLAYERS.PLAYER_ID=MATCHES.WINNER
GROUP BY PLAYER_ID
ORDER BY WINS;

--A VIEW THAT CONTAINS PLAYER INFORMATION AND NUMBER OF GAMES PLAYED
CREATE VIEW PLAYER_GAMES AS
SELECT PLAYERS.PLAYER_ID, PLAYERS.NAME, COUNT(MATCHES.*) AS GAMES_PLAYED
FROM PLAYERS LEFT JOIN MATCHES 
ON PLAYERS.PLAYER_ID=MATCHES.WINNER OR PLAYERS.PLAYER_ID=MATCHES.LOSER
GROUP BY PLAYER_ID;

--A VIEW THAT REPRESENTS THE STANDINGS (ID,NAME,WINS,GAMES_PLAYED)
CREATE VIEW STANDINGS AS
SELECT PLAYER_WINS.*, PLAYER_GAMES.GAMES_PLAYED
FROM PLAYER_WINS, PLAYER_GAMES
WHERE PLAYER_WINS.PLAYER_ID=PLAYER_GAMES.PLAYER_ID
ORDER BY WINS;
